@startuml
package "Robot System" {
  class Robot {
    - id: String
    - state: RobotState
    - batteryLevel: Integer
    - env: Environment
    - memory: MemoryStore
    - nav: Navigation
    - manip: Manipulator
    - comms: Communicator
    + powerOn(): Boolean
    + powerOff(): Boolean
    + tick(command: Command): String
  }

  enum RobotState {
    OFF
    IDLE
    MOVING
    MANIPULATING
    COMMUNICATING
    ERROR
  }

  class Navigation {
    - pathQueue: Queue<Waypoint>
    + planPath(start: Waypoint, target: Waypoint, env: Environment): Boolean
    + nextStep(): Waypoint
  }

  class Manipulator {
    - graspHistory: Stack<String>
    + pick(objectId: String): Boolean
    + undoLastGrasp(): Boolean
  }

  class Communicator {
    + speak(text: String): void
    + display(text: String): void
  }

  class Environment {
    - objects: List<EnvObject>
    - objectIndex: Dict<String, EnvObject>
    - sensorReadings: List<Float>
    - obstacles: List<(Integer, Integer)>
    + sense(): void
    + findNearestObject(kind: String): EnvObject
    + isObstacle(x: Integer, y: Integer): Boolean
  }

  class CLI {
    - cmdQueue: Queue<Command>
    + enqueue(cmd: Command): void
    + readCommand(): Command
  }

  class MemoryStore {
    - facts: List<String>
    - breadcrumbs: Stack<String>
    + pushAction(action: String): void
    + lastAction(): String
  }

  class Command {
    + type: String
    + args: Map<String,String>
  }

  class Waypoint {
    + x: Integer
    + y: Integer
  }

  class EnvObject {
    + kind: String
    + id: String
    + position: Waypoint
  }

  Robot *-- Navigation
  Robot *-- Manipulator
  Robot *-- Communicator
  Robot *-- Environment
  Robot *-- MemoryStore
  Robot --> RobotState

  Environment "1" o-- "*" EnvObject
  CLI ..> Command
  Robot ..> Command
  CLI --> Robot : "sends Command"
}
@enduml
